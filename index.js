(()=>{"use strict";class t{constructor(t){this.player=t,this.keys={},document.addEventListener("keydown",(t=>this.onKeyDown(t))),document.addEventListener("keyup",(t=>this.onKeyUp(t)))}onKeyDown(t){this.keys[t.code]=!0}onKeyUp(t){this.keys[t.code]=!1}keyIsPressed(t){return this.keys[t]||!1}update(t){this.keyIsPressed("KeyW")&&this.player.moveForward(t),this.keyIsPressed("KeyS")&&this.player.moveBackward(t),this.keyIsPressed("KeyA")&&this.player.turnLeft(t),this.keyIsPressed("KeyD")&&this.player.turnRight(t)}}const e={WINDOW_WIDTH:640,WINDOW_HEIGHT:480,TILE_SIZE:16,FOV:1,VIEW_DISTANCE:100,WALL_HEIGHT:32};class s{constructor(t){this.grid=t}render(t){const s=e.TILE_SIZE/4;for(let e=0;e<this.grid.length;e++)for(let i=0;i<this.grid[e].length;i++){const r=this.grid[e][i];1===r?t.drawRect(i*s,e*s,s,s,"white"):2===r&&t.drawRect(i*s,e*s,s,s,"blue")}}getCell(t,e){return t=Math.floor(t),e=Math.floor(e),!(t<0||t>=this.grid[0].length||e<0||e>=this.grid.length)&&this.grid[e][t]}}class i{constructor(t,e){this._x=t,this._y=e}get x(){return this._x}get y(){return this._y}set x(t){this._x=t}set y(t){this._y=t}}class r{constructor(t,e,s,i){this.position=t,this.angle=e,this.speed=s,this.fov=i}update(t){}render(t){const s=e.TILE_SIZE/4;t.drawRect(this.position.x*s,this.position.y*s,s,s,"red")}changeSpeed(t){this.speed=t}moveForward(t){this.position.x+=Math.cos(this.angle)*this.speed*t,this.position.y+=Math.sin(this.angle)*this.speed*t}moveBackward(t){this.position.x-=Math.cos(this.angle)*this.speed*t,this.position.y-=Math.sin(this.angle)*this.speed*t}turnLeft(t){this.angle-=this.speed/5*t}turnRight(t){this.angle+=this.speed/5*t}}class h{constructor(t,e,s,i){this.canvas=t,this.canvas.width=e,this.canvas.height=s,this.canvas.style.backgroundColor="gray",this.ctx=t.getContext("2d"),this.map=i}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}drawRect(t,e,s,i,r){this.ctx.fillStyle=r,this.ctx.fillRect(t,e,s,i)}castRay(t,s,i){let r=t,h=s,a=i,n=0,o=null;const c=e.VIEW_DISTANCE;for(;n<c&&(r=t+n*Math.cos(a),h=s+n*Math.sin(a),o=this.map.getCell(Math.floor(r),Math.floor(h)),1!==o);)n+=.01;return{distance:n,object:o}}render(t){const s=this.canvas.width,i=(this.canvas.height,t.position.x),r=t.position.y,h=t.angle;this.clear();for(let t=0;t<s;t++){const a=h-e.FOV/2+t/s*e.FOV,n=this.castRay(i,r,a);this.renderColumn(t,n)}}renderColumn(t,s){const i=this.canvas.height,r=s.distance,h=s.object,a=e.TILE_SIZE/r*e.VIEW_DISTANCE,n=i/2-a/2,o=i/2+a/2,c=2===h?"blue":"white";this.drawRect(t,0,1,n,"black"),this.drawRect(t,n,1,a,c),this.drawRect(t,o,1,i-o,"black")}}class a{constructor(){this.lastTime=performance.now(),this.deltaTime=0,this.callback=()=>{}}start(t){this.callback=t,this.lastTime=performance.now(),this.loop()}loop(){const t=performance.now();this.deltaTime=t-this.lastTime,this.lastTime=t,this.callback(this.deltaTime),requestAnimationFrame((()=>this.loop()))}getDeltaTime(){return this.deltaTime}}const n=new class{constructor(e){this.map=new s([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,0,1,1,1,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,1,1,2,1,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,1,2,2,1,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,1,2,2,1,2,1,0,1],[1,0,0,0,0,0,0,0,0,0,1,2,2,1,2,1,0,1],[1,1,1,1,1,1,1,1,1,1,1,2,2,1,2,1,0,1],[1,2,2,2,2,2,2,2,2,2,1,2,2,1,2,1,0,1],[1,2,2,2,2,2,2,2,2,2,1,2,2,1,2,1,0,1],[1,2,2,2,2,2,2,2,2,2,1,2,2,1,2,1,0,1],[1,2,2,2,2,2,2,2,2,2,1,2,2,1,2,1,0,1]]),this.assets=function(t){const e={};return t.forEach((t=>{const s=new Image;s.src=t,e[t]=s})),e}(["assets/texture.png"]),this.timer=new a,this.renderer=new h(document.querySelector("canvas"),e.WINDOW_WIDTH,e.WINDOW_HEIGHT,this.map),this.player=new r(new i(2,2),0,.005,e.FOV),this.controller=new t(this.player)}update(t){this.controller.update(t),this.player.update(t)}render(){this.renderer.clear(),this.renderer.render(this.player),this.map.render(this.renderer),this.player.render(this.renderer)}loop(t){this.update(t),this.render()}start(){this.timer.start((t=>this.loop(t)))}}(e);n.start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,