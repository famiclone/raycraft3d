(()=>{"use strict";class t{constructor(t){this.player=t,this.keys={},document.addEventListener("keydown",(t=>this.onKeyDown(t))),document.addEventListener("keyup",(t=>this.onKeyUp(t)))}onKeyDown(t){this.keys[t.code]=!0}onKeyUp(t){this.keys[t.code]=!1}keyIsPressed(t){return this.keys[t]||!1}update(t){this.keyIsPressed("KeyW")&&this.player.moveForward(t),this.keyIsPressed("KeyS")&&this.player.moveBackward(t),this.keyIsPressed("KeyA")&&this.player.turnLeft(t),this.keyIsPressed("KeyD")&&this.player.turnRight(t)}}const s={WINDOW_WIDTH:1024,WINDOW_HEIGHT:768,TILE_SIZE:16,FOV:.5,VIEW_DISTANCE:100,WALL_HEIGHT:16,COLUMN_WIDTH:1};class e{constructor(t){this.grid=t}render(t){const e=s.TILE_SIZE/4;for(let s=0;s<this.grid.length;s++)for(let i=0;i<this.grid[s].length;i++){const r=this.grid[s][i];7===r?t.drawRect(i*e,s*e,e,e,"white"):2===r&&t.drawRect(i*e,s*e,e,e,"blue")}}getCell(t,s){return t=Math.floor(t),s=Math.floor(s),!(t<0||t>=this.grid[0].length||s<0||s>=this.grid.length)&&this.grid[s][t]}}class i{constructor(t,s){this._x=t,this._y=s}get x(){return this._x}get y(){return this._y}set x(t){this._x=t}set y(t){this._y=t}}class r{constructor(t,s,e,i){this.position=t,this.angle=s,this.speed=e,this.fov=i}update(t){}render(t){const e=s.TILE_SIZE/4;t.drawRect(this.position.x*e,this.position.y*e,e,e,"red")}changeSpeed(t){this.speed=t}moveForward(t){this.position.x+=Math.cos(this.angle)*this.speed*t,this.position.y+=Math.sin(this.angle)*this.speed*t}moveBackward(t){this.position.x-=Math.cos(this.angle)*this.speed*t,this.position.y-=Math.sin(this.angle)*this.speed*t}turnLeft(t){this.angle-=this.speed/5*t}turnRight(t){this.angle+=this.speed/5*t}}class h{constructor(t,s,e,i,r){this.canvas=t,this.canvas.width=s,this.canvas.height=e,this.canvas.style.backgroundColor="gray",this.ctx=t.getContext("2d"),this.map=i,this.assets=r}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}drawRect(t,s,e,i,r){this.ctx.fillStyle=r,this.ctx.fillRect(t,s,e,i)}castRay(t,e,i){let r=t,h=e,a=i,n=0,o=null;const c=s.VIEW_DISTANCE;let l=0,d=0;for(;n<c;){if(r=t+n*Math.cos(a),h=e+n*Math.sin(a),o=this.map.getCell(Math.floor(r),Math.floor(h)),0!==o){l=r%1,d=h%1;break}n+=.01}return{distance:n,object:o,xOffset:l,yOffset:d}}render(t){const e=this.canvas.width,i=t.position.x,r=t.position.y,h=t.angle;this.clear();for(let t=0;t<e;t+=s.COLUMN_WIDTH){const a=h-s.FOV/2+t/e*s.FOV,n=this.castRay(i,r,a);this.renderColumn(t,n)}}renderColumn(t,e){const i=this.canvas.height,r=e.distance,h=e.xOffset,a=(e.yOffset,s.TILE_SIZE/r*s.VIEW_DISTANCE),n=i/2-a/2,o=i/2+a/2,c=a*s.COLUMN_WIDTH*2,l=[16*e.object,0];this.drawRect(t,0,c,n,"skyblue"),this.drawRect(t,o,c,i-o,"green"),this.ctx.drawImage(this.assets["assets/textures.png"],l[0]+Math.floor(16*h),l[1],c,16,t,n,c,a)}}class a{constructor(){this.lastTime=performance.now(),this.deltaTime=0,this.callback=()=>{}}start(t){this.callback=t,this.lastTime=performance.now(),this.loop()}loop(){const t=performance.now();this.deltaTime=t-this.lastTime,this.lastTime=t,this.callback(this.deltaTime),requestAnimationFrame((()=>this.loop()))}getDeltaTime(){return this.deltaTime}}const n=new class{constructor(s){this.map=new e([[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],[7,0,0,0,0,0,0,0,0,0,0,0,0,7,0,7,2,7],[7,0,0,0,0,0,0,0,0,0,0,0,0,0,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,0,0,0,7,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,0,0,0,7,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,0,0,0,7,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,0,0,0,7,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,0,0,0,7,2,7,0,7],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,0,0,0,7,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,0,7,7,7,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,0,7,2,7,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,0,7,2,7,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,0,7,2,7,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,0,7,2,7,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,7,7,2,7,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,7,2,2,7,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,7,2,2,7,2,7,0,7],[7,0,0,0,0,0,0,0,0,0,7,2,2,7,2,7,0,7],[7,7,7,7,7,7,7,7,7,7,7,2,2,7,2,7,0,7],[7,2,2,2,2,2,2,2,2,2,7,2,2,7,2,7,0,7],[7,2,2,2,2,2,2,2,2,2,7,2,2,7,2,7,0,7],[7,2,2,2,2,2,2,2,2,2,7,2,2,7,2,7,0,7],[7,2,2,2,2,2,2,2,2,2,7,2,2,7,2,7,0,7]]),this.assets=function(t){const s={};return t.forEach((t=>{const e=new Image;e.src=t,s[t]=e})),s}(["assets/textures.png"]),this.timer=new a,this.renderer=new h(document.querySelector("canvas"),s.WINDOW_WIDTH,s.WINDOW_HEIGHT,this.map,this.assets),this.player=new r(new i(2,2),0,.005,s.FOV),this.controller=new t(this.player)}update(t){this.controller.update(t),this.player.update(t)}render(){this.renderer.clear(),this.renderer.render(this.player),this.map.render(this.renderer),this.player.render(this.renderer)}loop(t){this.update(t),this.render()}start(){this.timer.start((t=>this.loop(t)))}}(s);n.start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,